---
# ArgoCD installation and configuration

- name: Create argocd namespace
  kubernetes.core.k8s:
    name: "{{ argocd_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Add ArgoCD Helm repository
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm
    state: present
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Install ArgoCD with Helm
  kubernetes.core.helm:
    name: argocd
    chart_ref: argo/argo-cd
    release_namespace: "{{ argocd_namespace }}"
    create_namespace: false
    chart_version: "{{ argocd_version }}"
    values:
      global:
        image:
          tag: "v2.9.3"
      server:
        ingress:
          enabled: "{{ argocd_server.ingress.enabled }}"
          ingressClassName: "{{ argocd_server.ingress.ingressClassName }}"
          hosts:
            - "{{ argocd_server.ingress.hostname }}"
          tls:
            - secretName: argocd-server-tls
              hosts:
                - "{{ argocd_server.ingress.hostname }}"
          annotations: "{{ argocd_server.ingress.annotations }}"
        config: "{{ argocd_config }}"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
      controller:
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
      dex:
        enabled: false  # Disable OIDC for simplicity
      redis-ha:
        enabled: "{{ argocd_ha.enabled }}"
      redis:
        enabled: "{{ argocd_redis.enabled }}"
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 100m
            memory: 128Mi
    state: present
    wait: true
    wait_timeout: 600
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Wait for ArgoCD server to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: argocd-server
    namespace: "{{ argocd_namespace }}"
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 300
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Get ArgoCD initial admin password
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: argocd-initial-admin-secret
    namespace: "{{ argocd_namespace }}"
  register: argocd_admin_secret
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Decode ArgoCD admin password
  set_fact:
    argocd_admin_password: "{{ argocd_admin_secret.resources[0].data.password | b64decode }}"
  when: argocd_admin_secret.resources | length > 0

- name: Create ArgoCD CLI configuration directory
  file:
    path: /root/.argocd
    state: directory
    mode: '0755'

- name: Display ArgoCD access information
  debug:
    msg: |
      âœ… ArgoCD installed successfully!
      â€¢ Version: {{ argocd_version }}
      â€¢ Namespace: {{ argocd_namespace }}
      â€¢ URL: https://{{ argocd_server.ingress.hostname }}
      â€¢ Username: admin
      â€¢ Password: {{ argocd_admin_password | default('Check secret: kubectl -n argocd get secret argocd-initial-admin-secret') }}
      
      ðŸš€ GitOps ready!
      â€¢ Connect your Git repositories
      â€¢ Deploy applications declaratively
      â€¢ Automatic sync from Git commits

- name: Create sample application manifest directory
  file:
    path: /root/argocd-apps
    state: directory
    mode: '0755'

- name: Create sample ArgoCD application
  copy:
    content: |
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: sample-app
        namespace: {{ argocd_namespace }}
      spec:
        project: default
        source:
          repoURL: https://github.com/argoproj/argocd-example-apps.git
          targetRevision: HEAD
          path: guestbook
        destination:
          server: https://kubernetes.default.svc
          namespace: default
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions:
          - CreateNamespace=true
    dest: /root/argocd-apps/sample-app.yaml
    mode: '0644'
