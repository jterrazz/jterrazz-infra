---
# ArgoCD installation and configuration

- name: Create argocd namespace
  kubernetes.core.k8s:
    name: "{{ argocd_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

  # Determine if ArgoCD is already deployed first, to avoid downloading/cleaning manifests needlessly
- name: Check if ArgoCD is already deployed
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: argocd-server
    namespace: "{{ argocd_namespace }}"
  register: argocd_deployment
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  failed_when: false

- name: Check if ArgoCD manifest exists
  ansible.builtin.stat:
    path: "/tmp/argocd-install.yaml"
  register: argocd_manifest_exists

- name: Download ArgoCD installation manifest
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
    dest: "/tmp/argocd-install.yaml"
    mode: "0644"
  when: (argocd_deployment is not defined) or (argocd_deployment.resources | length == 0)

  # Deployment check moved earlier

- name: Apply ArgoCD manifests to the argocd namespace
  ansible.builtin.shell: |
    kubectl apply -n {{ argocd_namespace }} -f /tmp/argocd-install.yaml
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml
  when: argocd_deployment.resources | length == 0
  register: argocd_apply_result
  changed_when: "'created' in argocd_apply_result.stdout or 'configured' in argocd_apply_result.stdout"

- name: Wait for ArgoCD server to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: argocd-server
    namespace: "{{ argocd_namespace }}"
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 180
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Get ArgoCD initial admin password
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: argocd-initial-admin-secret
    namespace: "{{ argocd_namespace }}"
  register: argocd_admin_secret
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Decode ArgoCD admin password
  ansible.builtin.set_fact:
    argocd_admin_password: "{{ argocd_admin_secret.resources[0].data.password | b64decode }}"
  when: argocd_admin_secret.resources | length > 0

- name: Create ArgoCD CLI configuration directory
  ansible.builtin.file:
    path: /root/.argocd
    state: directory
    mode: "0755"

- name: Display ArgoCD access information
  ansible.builtin.debug:
    msg: |
      âœ… ArgoCD installed successfully!
      â€¢ Namespace: {{ argocd_namespace }}
      â€¢ Username: admin
      â€¢ Password: {{ argocd_admin_password | default('Check secret: kubectl -n argocd get secret argocd-initial-admin-secret') }}

      ðŸ”— Access ArgoCD:
      â€¢ Port-forward: kubectl port-forward svc/argocd-server -n argocd 8080:443
      â€¢ Then open: https://localhost:8080 (accept self-signed cert)

      ðŸš€ GitOps ready!
      â€¢ Connect your Git repositories
      â€¢ Deploy applications declaratively
      â€¢ Automatic sync from Git commits

- name: Create sample application manifest directory
  ansible.builtin.file:
    path: /root/argocd-apps
    state: directory
    mode: "0755"

- name: Clean up installation manifest
  ansible.builtin.file:
    path: /tmp/argocd-install.yaml
    state: absent
  when: (argocd_deployment is not defined) or (argocd_deployment.resources | length == 0)

- name: Create sample ArgoCD application
  ansible.builtin.copy:
    content: |
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: sample-app
        namespace: {{ argocd_namespace }}
      spec:
        project: default
        source:
          repoURL: https://github.com/argoproj/argocd-example-apps.git
          targetRevision: HEAD
          path: guestbook
        destination:
          server: https://kubernetes.default.svc
          namespace: default
        syncPolicy:
          automated:
            prune: true
            selfHeal: true
          syncOptions:
          - CreateNamespace=true
    dest: /root/argocd-apps/sample-app.yaml
    mode: "0644"
