---
# cert-manager installation and configuration

- name: Create cert-manager namespace
  kubernetes.core.k8s:
    name: "{{ cert_manager_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Add cert-manager Helm repository
  kubernetes.core.helm_repository:
    name: jetstack
    repo_url: https://charts.jetstack.io
    state: present
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Install cert-manager with Helm
  kubernetes.core.helm:
    name: cert-manager
    chart_ref: jetstack/cert-manager
    release_namespace: "{{ cert_manager_namespace }}"
    create_namespace: false
    chart_version: "{{ cert_manager_version }}"
    values:
      installCRDs: true
      prometheus:
        enabled: false
      webhook:
        timeoutSeconds: 30
    state: present
    wait: true
    wait_condition:
      type: Ready
      status: "True"
    wait_timeout: 300
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Wait for cert-manager to be ready
  kubernetes.core.k8s_info:
    api_version: apps/v1
    kind: Deployment
    name: cert-manager
    namespace: "{{ cert_manager_namespace }}"
    wait_condition:
      type: Available
      status: "True"
    wait_timeout: 300
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Create Let's Encrypt ClusterIssuer (staging)
  kubernetes.core.k8s:
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-staging
      spec:
        acme:
          server: "{{ letsencrypt_staging_server }}"
          email: "{{ letsencrypt_email }}"
          privateKeySecretRef:
            name: letsencrypt-staging
          solvers:
          - http01:
              ingress:
                class: nginx
    state: present
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Create Let's Encrypt ClusterIssuer (production)
  kubernetes.core.k8s:
    definition:
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-prod
      spec:
        acme:
          server: "{{ letsencrypt_server }}"
          email: "{{ letsencrypt_email }}"
          privateKeySecretRef:
            name: letsencrypt-prod
          solvers:
          - http01:
              ingress:
                class: nginx
    state: present
  environment:
    KUBECONFIG: /etc/rancher/k3s/k3s.yaml

- name: Display cert-manager status
  debug:
    msg: |
      âœ… cert-manager installed successfully!
      â€¢ Version: {{ cert_manager_version }}
      â€¢ Namespace: {{ cert_manager_namespace }}
      â€¢ Email: {{ letsencrypt_email }}
      â€¢ ClusterIssuer: letsencrypt-prod (automatic SSL certificates)
      
      ðŸ”’ SSL certificates will be automatically issued for Ingress resources
      with the annotation: cert-manager.io/cluster-issuer: letsencrypt-prod
