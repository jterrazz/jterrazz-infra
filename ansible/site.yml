---
# Jterrazz Infrastructure - Unified Ansible Playbook
# Works for both production VPS and local Docker development

- name: Jterrazz Infrastructure Setup
  hosts: all
  become: true
  gather_facts: true

  vars:
    # Vault variables (sensitive data)
    tailscale_auth_key: "{{ vault_tailscale_auth_key | default('') }}"

    # Note: Other configuration is now properly organized in group_vars/

  pre_tasks:
    - name: Display deployment environment information
      ansible.builtin.debug:
        msg: |
          {% if environment_type in ['local', 'multipass'] %}
          üè† Starting LOCAL DEVELOPMENT deployment
          üì¶ Target: {{ ansible_hostname }} ({{ ansible_distribution }} {{ ansible_distribution_version }})
          üîß Environment: {{ environment_type | default('production') }}
          ‚ö†Ô∏è  This is NOT a production deployment!
          {% else %}
          üöÄ Starting PRODUCTION deployment
          üñ•Ô∏è  Target: {{ ansible_hostname }} ({{ ansible_distribution }} {{ ansible_distribution_version }})
          üîß Environment: {{ environment_type | default('production') }}
          üõ°Ô∏è Production security will be applied
          {% endif %}

    - name: Wait for system to be ready (local development)
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 0
        delay: 0
        timeout: 300
      when: environment_type in ['local', 'multipass']

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install essential packages
      ansible.builtin.apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - unzip
          - ca-certificates
          - gnupg
          - lsb-release
          - python3-pip
          - python3-yaml # Required for Ansible Kubernetes modules
          - python3-kubernetes # Required for Ansible Kubernetes modules
          - jq
          - iptables # Required for k3s networking
        state: present

    - name: Create k3s directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ k3s_config_dir }}"
        - "{{ k3s_data_dir }}"
        - /var/log/k3s

  roles:
    - role: security
      when: not (skip_security | default(false))

    - role: tailscale
      when: not (skip_tailscale | default(false))

    - role: k3s

    - role: helm

    # Removed complex roles - using Traefik built-in instead!
    # - cert-manager: Not needed, Traefik has built-in ACME
    # - nginx-ingress: Not needed, k3s comes with Traefik
    # Note: ArgoCD and Portainer are now deployed in post_tasks for consistency

  post_tasks:
    # Deploy infrastructure applications
    - name: Create infrastructure namespaces
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Namespace
        state: present
      loop:
        - portainer
        - argocd

    - name: Deploy Portainer
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/applications/portainer.yml') | from_yaml_all }}"
      when: not (skip_portainer | default(false))

    - name: Deploy ArgoCD
      ansible.builtin.shell: |
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      when: not (skip_argocd | default(false))
      changed_when: true

    - name: Deploy mDNS publisher for local DNS resolution
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/services/mdns-publisher.yml') | from_yaml_all }}"
      when: is_local_development | default(false)

    - name: Deploy global HTTPS redirect
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/traefik/global-https-redirect.yml') | from_yaml_all }}"
      retries: 10
      delay: 5
      register: https_redirect_result
      until: https_redirect_result is succeeded
      failed_when: false # Don't fail if CRDs aren't ready yet

    - name: Display HTTPS redirect status
      ansible.builtin.debug:
        msg: "{{ 'HTTPS redirect deployed successfully' if https_redirect_result is succeeded else 'HTTPS redirect will be applied later when Traefik CRDs are ready' }}"

    - name: Create TLS certificates for .local domains
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/jobs/create-tls-certificates.yml') | from_yaml_all }}"
      when: is_local_development | default(false)

    - name: Get Tailscale IP if connected
      ansible.builtin.command: tailscale ip -4
      register: tailscale_ip_result
      changed_when: false
      failed_when: false
      when: not (skip_tailscale | default(false))

    - name: Display cluster information
      ansible.builtin.debug:
        msg: |
          üéâ Jterrazz Infrastructure Setup Complete!

          üìã Summary:
          ‚Ä¢ Environment: {{ environment_type | default('production') }}
          ‚Ä¢ Target: {{ ansible_hostname }}

          üîß Installed Components:
          ‚Ä¢ ‚úÖ k3s Kubernetes cluster
          ‚Ä¢ ‚úÖ Helm package manager
          ‚Ä¢ ‚úÖ Traefik ingress controller (built-in!)

          üöÄ Next Steps:
          1. Get kubeconfig: make kubeconfig
          2. Test cluster: kubectl get nodes
          3. Check Traefik: kubectl get pods -n kube-system

          üéØ Much simpler setup with Traefik! üöÄ

    - name: Create kubeconfig copy
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{% if environment_type == 'multipass' %}../local-kubeconfig.yaml{% else %}./kubeconfig{% endif %}"
        flat: true
      delegate_to: "{{ inventory_hostname }}"

    - name: Update kubeconfig server address
      ansible.builtin.replace:
        path: "{% if environment_type == 'multipass' %}../local-kubeconfig.yaml{% else %}./kubeconfig{% endif %}"
        regexp: 'https://127\.0\.0\.1:6443'
        replace: "{% if environment_type == 'multipass' %}https://localhost:6443{% else %}https://{{ ansible_host }}:6443{% endif %}"
        backup: false
      delegate_to: localhost
      become: false
