---
# Jterrazz Infrastructure - Unified Ansible Playbook
# Works for both production VPS and local Docker development

- name: Jterrazz Infrastructure Setup
  hosts: all
  become: true
  gather_facts: true

  vars:
    # Vault variables (sensitive data)
    tailscale_auth_key: "{{ vault_tailscale_auth_key | default('') }}"

    # Note: Other configuration is now properly organized in group_vars/

  pre_tasks:
    - name: Display deployment environment information
      ansible.builtin.debug:
        msg: |
          {% if environment_type in ['local', 'multipass'] %}
          🏠 Starting LOCAL DEVELOPMENT deployment
          📦 Target: {{ ansible_hostname }} ({{ ansible_distribution }} {{ ansible_distribution_version }})
          🔧 Environment: {{ environment_type | default('production') }}
          ⚠️  This is NOT a production deployment!
          {% else %}
          🚀 Starting PRODUCTION deployment
          🖥️  Target: {{ ansible_hostname }} ({{ ansible_distribution }} {{ ansible_distribution_version }})
          🔧 Environment: {{ environment_type | default('production') }}
          🛡️ Production security will be applied
          {% endif %}

    - name: Wait for system to be ready (local development)
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 0
        delay: 0
        timeout: 300
      when: environment_type in ['local', 'multipass']

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install essential packages
      ansible.builtin.apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - unzip
          - ca-certificates
          - gnupg
          - lsb-release
          - python3-pip
          - python3-yaml # Required for Ansible Kubernetes modules
          - python3-kubernetes # Required for Ansible Kubernetes modules
          - jq
          - iptables # Required for k3s networking
        state: present

    - name: Create k3s directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ k3s_config_dir }}"
        - "{{ k3s_data_dir }}"
        - /var/log/k3s

  roles:
    - role: security
      when: not (skip_security | default(false))

    - role: tailscale
      when: not (skip_tailscale | default(false))

    - role: k3s

    - role: helm

    # Removed complex roles - using Traefik built-in instead!
    # - cert-manager: Not needed, Traefik has built-in ACME
    # - nginx-ingress: Not needed, k3s comes with Traefik
    # Note: ArgoCD and Portainer are now deployed in post_tasks for consistency

  post_tasks:
    - name: Create namespaces for infrastructure applications
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Namespace
        state: present
      loop:
        - portainer
      when: not (skip_portainer | default(false))

    - name: Deploy Portainer infrastructure application
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/applications/portainer.yml') | from_yaml_all }}"
        wait: true
        wait_timeout: 300
      when: not (skip_portainer | default(false))

    - name: Create ArgoCD namespace
      kubernetes.core.k8s:
        name: argocd
        api_version: v1
        kind: Namespace
        state: present
      when: not (skip_argocd | default(false))

    - name: Check if ArgoCD is already deployed
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: argocd-server
        namespace: argocd
      register: argocd_deployment
      failed_when: false
      when: not (skip_argocd | default(false))

    - name: Download ArgoCD installation manifest
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
        dest: "/tmp/argocd-install.yaml"
        mode: "0644"
      when: not (skip_argocd | default(false)) and (argocd_deployment.resources | default([]) | length == 0)

    - name: Deploy ArgoCD infrastructure application
      ansible.builtin.shell: |
        kubectl apply -n argocd -f /tmp/argocd-install.yaml
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      when: not (skip_argocd | default(false)) and (argocd_deployment.resources | default([]) | length == 0)
      register: argocd_apply_result
      changed_when: "'created' in argocd_apply_result.stdout or 'configured' in argocd_apply_result.stdout"

    - name: Wait for ArgoCD server to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: argocd-server
        namespace: argocd
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 180
      when: not (skip_argocd | default(false))

    - name: Get ArgoCD initial admin password
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: argocd-initial-admin-secret
        namespace: argocd
      register: argocd_admin_secret
      when: not (skip_argocd | default(false))

    - name: Display ArgoCD access information
      ansible.builtin.debug:
        msg: |
          ✅ ArgoCD deployed successfully!
          • Username: admin
          • Password: {{ argocd_admin_secret.resources[0].data.password | b64decode }}
          • Access: kubectl port-forward svc/argocd-server -n argocd 8080:443
          • Then: https://localhost:8080
      when: not (skip_argocd | default(false)) and argocd_admin_secret.resources | default([]) | length > 0

    - name: Get Tailscale IP if connected
      ansible.builtin.command: tailscale ip -4
      register: tailscale_ip_result
      changed_when: false
      failed_when: false
      when: not (skip_tailscale | default(false))

    - name: Display cluster information
      ansible.builtin.debug:
        msg: |
          🎉 Jterrazz Infrastructure Setup Complete!

          📋 Summary:
          • Environment: {{ environment_type | default('production') }}
          • Target: {{ ansible_hostname }}

          🔧 Installed Components:
          • ✅ k3s Kubernetes cluster
          • ✅ Helm package manager
          • ✅ Traefik ingress controller (built-in!)

          🚀 Next Steps:
          1. Get kubeconfig: make kubeconfig
          2. Test cluster: kubectl get nodes
          3. Check Traefik: kubectl get pods -n kube-system

          🎯 Much simpler setup with Traefik! 🚀

    - name: Create kubeconfig copy
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{% if environment_type == 'multipass' %}../local-kubeconfig.yaml{% else %}./kubeconfig{% endif %}"
        flat: true
      delegate_to: "{{ inventory_hostname }}"

    - name: Update kubeconfig server address
      ansible.builtin.replace:
        path: "{% if environment_type == 'multipass' %}../local-kubeconfig.yaml{% else %}./kubeconfig{% endif %}"
        regexp: 'https://127\.0\.0\.1:6443'
        replace: "{% if environment_type == 'multipass' %}https://localhost:6443{% else %}https://{{ ansible_host }}:6443{% endif %}"
        backup: false
      delegate_to: localhost
      become: false
