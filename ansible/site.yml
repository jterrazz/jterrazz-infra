---
# JTerrazz Infrastructure - Main Ansible Playbook
# Complete server setup with k3s, Tailscale, and cloud-native applications

- name: JTerrazz Infrastructure Setup
  hosts: k3s_cluster
  become: yes
  gather_facts: yes

  vars:
    # k3s configuration
    k3s_version: "{{ k3s_version | default('v1.28.5+k3s1') }}"
    k3s_data_dir: "/var/lib/rancher/k3s"
    k3s_config_dir: "/etc/rancher/k3s"

    # Domain configuration
    domain_name: "{{ domain_name | default('localhost') }}"

    # Application versions
    helm_version: "v3.13.3"
    argocd_version: "v2.9.3"
    cert_manager_version: "v1.13.3"
    nginx_ingress_version: "4.8.3"

    # Tailscale
    tailscale_auth_key: "{{ vault_tailscale_auth_key | default('') }}"

  pre_tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install essential packages
      apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - unzip
          - ca-certificates
          - gnupg
          - lsb-release
          - python3-pip
          - jq
        state: present

    - name: Create k3s directories
      file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ k3s_config_dir }}"
        - "{{ k3s_data_dir }}"
        - /var/log/k3s

  roles:
    - security
    - tailscale
    - k3s
    - helm
    - cert-manager
    - nginx-ingress
    - argocd

  post_tasks:
    - name: Wait for ArgoCD to be fully ready
      pause:
        seconds: 30

    - name: Deploy ArgoCD applications
      kubernetes.core.k8s:
        src: "{{ item }}"
        state: present
      loop:
        - ../kubernetes/argocd/portainer-app.yml
        - ../kubernetes/argocd/default-ingress-app.yml
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      ignore_errors: true # ArgoCD might not be fully ready yet

    - name: Get Tailscale IP if connected
      command: tailscale ip -4
      register: tailscale_ip_result
      changed_when: false
      failed_when: false

    - name: Display cluster information
      debug:
        msg: |
          üéâ JTerrazz Infrastructure Setup Complete!

          üîó Access Points:
          ‚Ä¢ Kubernetes API: https://{{ ansible_host }}:6443
          ‚Ä¢ ArgoCD: https://argocd.{{ domain_name }}
          ‚Ä¢ Portainer: https://portainer.{{ domain_name }} (Tailscale only)
          {% if tailscale_ip_result.rc == 0 %}‚Ä¢ Tailscale IP: {{ tailscale_ip_result.stdout }}{% endif %}

          üõ°Ô∏è Security Status:
          ‚Ä¢ SSH hardened: Password auth disabled, key-only access
          ‚Ä¢ UFW firewall: Active with minimal ports open
          ‚Ä¢ fail2ban: Protecting against brute force attacks  
          ‚Ä¢ Auto-updates: Security patches applied automatically
          ‚Ä¢ Audit logging: System changes monitored

          üìã Next Steps:
          1. Get kubeconfig: scp root@{{ ansible_host }}:/etc/rancher/k3s/k3s.yaml ~/.kube/config
          2. Test connection: kubectl get nodes
          3. Access ArgoCD and deploy applications
          4. Check security: ssh root@{{ ansible_host }} '/usr/local/bin/security-status'

          üîê Default Credentials:
          ‚Ä¢ ArgoCD admin password: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

    - name: Create local kubeconfig copy
      fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: ./kubeconfig
        flat: yes
      delegate_to: "{{ inventory_hostname }}"

    - name: Update kubeconfig server address
      replace:
        path: ./kubeconfig
        regexp: 'https://127\.0\.0\.1:6443'
        replace: "https://{{ ansible_host }}:6443"
      delegate_to: localhost
      become: no
