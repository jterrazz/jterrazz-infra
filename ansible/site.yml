---
# Jterrazz Infrastructure - Unified Ansible Playbook
# Works for both production VPS and local Docker development

- name: Jterrazz Infrastructure Setup
  hosts: all
  become: true
  gather_facts: true

  vars:
    # Vault variables (sensitive data)
    tailscale_auth_key: "{{ vault_tailscale_auth_key | default('') }}"

    # Note: Other configuration is now properly organized in group_vars/

  pre_tasks:
    - name: Display deployment environment information
      ansible.builtin.debug:
        msg: |
          {% if environment_type in ['local', 'multipass'] %}
          🏠 Starting LOCAL DEVELOPMENT deployment
          📦 Target: {{ ansible_hostname }} ({{ ansible_distribution }} {{ ansible_distribution_version }})
          🔧 Environment: {{ environment_type | default('production') }}
          ⚠️  This is NOT a production deployment!
          {% else %}
          🚀 Starting PRODUCTION deployment
          🖥️  Target: {{ ansible_hostname }} ({{ ansible_distribution }} {{ ansible_distribution_version }})
          🔧 Environment: {{ environment_type | default('production') }}
          🛡️ Production security will be applied
          {% endif %}

    - name: Wait for system to be ready (local development)
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 0
        delay: 0
        timeout: 300
      when: environment_type in ['local', 'multipass']

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install essential packages
      ansible.builtin.apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - unzip
          - ca-certificates
          - gnupg
          - lsb-release
          - python3-pip
          - python3-yaml # Required for Ansible Kubernetes modules
          - python3-kubernetes # Required for Ansible Kubernetes modules
          - jq
          - iptables # Required for k3s networking
        state: present

    - name: Create k3s directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ k3s_config_dir }}"
        - "{{ k3s_data_dir }}"
        - /var/log/k3s

  roles:
    - role: security
      when: not (skip_security | default(false))

    - role: tailscale
      when: not (skip_tailscale | default(false))

    - role: k3s

    - role: helm

    # Removed complex roles - using Traefik built-in instead!
    # - cert-manager: Not needed, Traefik has built-in ACME
    # - nginx-ingress: Not needed, k3s comes with Traefik
    # Note: ArgoCD and Portainer are now deployed in post_tasks for consistency

  post_tasks:
    # Deploy infrastructure applications
    - name: Create infrastructure namespaces
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Namespace
        state: present
      loop:
        - portainer
        - argocd

    - name: Deploy Portainer
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/applications/portainer.yml') | from_yaml_all }}"
      when: not (skip_portainer | default(false))

    - name: Deploy ArgoCD
      ansible.builtin.shell: |
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      when: not (skip_argocd | default(false))
      changed_when: true

    - name: Deploy mDNS publisher for local DNS resolution
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/services/mdns-publisher.yml') | from_yaml_all }}"
      when: is_local_development | default(false)

    # Wait for Traefik CRDs to be available before deploying dependent resources
    - name: Wait for Traefik middleware CRD
      kubernetes.core.k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        name: middlewares.traefik.containo.us
      register: middleware_crd_check
      until: middleware_crd_check.resources | length > 0
      retries: 60
      delay: 5
      failed_when: false

    - name: Wait for Traefik IngressRoute CRD
      kubernetes.core.k8s_info:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        name: ingressroutes.traefik.containo.us
      register: ingressroute_crd_check
      until: ingressroute_crd_check.resources | length > 0
      retries: 60
      delay: 5
      failed_when: false

    - name: Deploy Traefik middleware configurations
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/traefik/middleware.yml') | from_yaml_all }}"
      when: middleware_crd_check is succeeded

    - name: Deploy global HTTPS redirect
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/traefik/global-https-redirect.yml') | from_yaml_all }}"
      when: ingressroute_crd_check is succeeded

    - name: Create TLS certificates for .local domains
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/jobs/create-tls-certificates.yml') | from_yaml_all }}"
      when: is_local_development | default(false)

    - name: Deploy landing page for local development
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/services/landing-page.yml') | from_yaml_all }}"
      when: is_local_development | default(false)

    - name: Deploy mDNS ingresses for local development
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '../kubernetes/ingress/local-mdns-ingresses.yml') | from_yaml_all }}"
      when: is_local_development | default(false) and ingressroute_crd_check is succeeded

    # Configure ArgoCD for local development (insecure mode for ingress)
    - name: Wait for ArgoCD to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: ConfigMap
        name: argocd-cmd-params-cm
        namespace: argocd
      register: argocd_configmap_check
      until: argocd_configmap_check.resources | length > 0
      retries: 60
      delay: 5
      when: is_local_development | default(false) and not (skip_argocd | default(false))

    - name: Configure ArgoCD for insecure mode (required for ingress)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-cmd-params-cm
            namespace: argocd
          data:
            server.insecure: "true"
        merge_type: merge
      when: is_local_development | default(false) and not (skip_argocd | default(false)) and argocd_configmap_check is succeeded

    - name: Restart ArgoCD server to apply insecure mode
      kubernetes.core.k8s:
        state: present
        api_version: apps/v1
        kind: Deployment
        name: argocd-server
        namespace: argocd
        definition:
          spec:
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/restartedAt: "{{ ansible_date_time.iso8601 }}"
      when: is_local_development | default(false) and not (skip_argocd | default(false)) and argocd_configmap_check is succeeded

    - name: Get Tailscale IP if connected
      ansible.builtin.command: tailscale ip -4
      register: tailscale_ip_result
      changed_when: false
      failed_when: false
      when: not (skip_tailscale | default(false))

    - name: Display cluster information
      ansible.builtin.debug:
        msg: "✅ Infrastructure setup complete - run 'make access' to see URLs"

    - name: Create kubeconfig copy
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{% if environment_type == 'multipass' %}../local-kubeconfig.yaml{% else %}./kubeconfig{% endif %}"
        flat: true
      delegate_to: "{{ inventory_hostname }}"

    - name: Update kubeconfig server address
      ansible.builtin.replace:
        path: "{% if environment_type == 'multipass' %}../local-kubeconfig.yaml{% else %}./kubeconfig{% endif %}"
        regexp: 'https://127\.0\.0\.1:6443'
        replace: "{% if environment_type == 'multipass' %}https://localhost:6443{% else %}https://{{ ansible_host }}:6443{% endif %}"
        backup: false
      delegate_to: localhost
      become: false
