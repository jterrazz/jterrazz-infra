---
# Jterrazz Infrastructure - Unified Ansible Playbook
# Works for both production VPS and local Docker development

- name: Jterrazz Infrastructure Setup
  hosts: all
  become: true
  gather_facts: true

  vars:
    # Vault variables (sensitive data)
    tailscale_auth_key: "{{ vault_tailscale_auth_key | default('') }}"

    # Note: Other configuration is now properly organized in group_vars/

  pre_tasks:
    - name: Display deployment environment information
      ansible.builtin.debug:
        msg: |
          {% if environment_type == 'local' %}
          üè† Starting LOCAL DEVELOPMENT deployment
          üì¶ Target: {{ ansible_hostname }} ({{ ansible_distribution }} {{ ansible_distribution_version }})
          üîß Environment: {{ environment_type | default('production') }}
          ‚ö†Ô∏è  This is NOT a production deployment!
          {% else %}
          üöÄ Starting PRODUCTION deployment
          üñ•Ô∏è  Target: {{ ansible_hostname }} ({{ ansible_distribution }} {{ ansible_distribution_version }})
          üîß Environment: {{ environment_type | default('production') }}
          üõ°Ô∏è Production security will be applied
          {% endif %}

    - name: Wait for system to be ready (local development)
      ansible.builtin.wait_for_connection:
        connect_timeout: 20
        sleep: 0
        delay: 0
        timeout: 300
      when: environment_type == 'local'

    - name: Update package cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install essential packages
      ansible.builtin.apt:
        name:
          - curl
          - wget
          - git
          - vim
          - htop
          - unzip
          - ca-certificates
          - gnupg
          - lsb-release
          - python3-pip
          - python3-yaml # Required for Ansible Kubernetes modules
          - python3-kubernetes # Required for Ansible Kubernetes modules
          - jq
          - iptables # Required for k3s networking
        state: present

    - name: Create k3s directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ k3s_config_dir }}"
        - "{{ k3s_data_dir }}"
        - /var/log/k3s

  roles:
    - role: security
      when: not (skip_security | default(false))

    - role: tailscale
      when: not (skip_tailscale | default(false))

    - role: storage

    - role: k3s

  post_tasks:
    - name: Get Tailscale IP if connected
      ansible.builtin.command: tailscale ip -4
      register: tailscale_ip_result
      changed_when: false
      failed_when: false
      when: not (skip_tailscale | default(false))

    - name: Create kubeconfig copy
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{% if environment_type == 'local' %}../local-kubeconfig.yaml{% else %}./kubeconfig{% endif %}"
        flat: true
      delegate_to: "{{ inventory_hostname }}"

    - name: Update kubeconfig server address
      ansible.builtin.replace:
        path: "{% if environment_type == 'local' %}../local-kubeconfig.yaml{% else %}./kubeconfig{% endif %}"
        regexp: 'https://127\.0\.0\.1:6443'
        replace: "https://{{ ansible_host }}:6443"
        backup: false
      delegate_to: localhost
      become: false

    # Wait for k3s Traefik installation to complete
    - name: Wait for Traefik Helm installation to complete
      ansible.builtin.shell: |
        kubectl wait --for=condition=complete job -l helmcharts.helm.cattle.io/chart=traefik -n kube-system --timeout=1s
      register: traefik_wait
      retries: 60
      delay: 1
      until: traefik_wait.rc == 0
      delegate_to: localhost
      become: false
      environment:
        KUBECONFIG: "{{ playbook_dir }}/../{% if environment_type == 'local' %}local-kubeconfig.yaml{% else %}kubeconfig{% endif %}"
      changed_when: false

    # Deploy all infrastructure (after kubeconfig is ready)
    - name: Deploy infrastructure components
      ansible.builtin.shell: |
        kubectl apply -k kubernetes/infrastructure/environments/{{ environment_type | default('production') }}
      args:
        chdir: "{{ playbook_dir }}/.."
      delegate_to: localhost
      become: false
      environment:
        KUBECONFIG: "{{ playbook_dir }}/../{% if environment_type == 'local' %}local-kubeconfig.yaml{% else %}kubeconfig{% endif %}"
      changed_when: true

    - name: Display cluster information
      ansible.builtin.debug:
        msg: "‚úÖ Infrastructure setup complete - run 'make status' to see details"
