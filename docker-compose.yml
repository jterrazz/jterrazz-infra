# Local Development Environment
# Simulates the VPS environment using Docker containers

services:
  # Main server container (simulates Hetzner VPS)
  jterrazz-server:
    image: ubuntu:22.04
    hostname: jterrazz-local
    container_name: jterrazz-infra-server
    privileged: true # Required for systemd and k3s
    restart: unless-stopped

    # Port mappings (simulating VPS services)
    ports:
      - "2222:22" # SSH (host:2222 -> container:22)
      - "80:80" # HTTP
      - "443:443" # HTTPS
      - "6443:6443" # k3s API server
      - "9000:9000" # Portainer (installed via Ansible/k3s)

    # Volumes for persistence
    volumes:
      - ./local-data/server:/data # Persistent data
      - ./local-data/k3s:/etc/rancher/k3s # k3s configuration
      - ./local-data/ssh:/home/ubuntu/.ssh # SSH keys
      - /var/run/docker.sock:/var/run/docker.sock # Docker socket (for k3s containers)
      - /lib/modules:/lib/modules:ro # Kernel modules for k3s

    # Environment variables
    environment:
      - DEBIAN_FRONTEND=noninteractive
      - TZ=Europe/Berlin
      - CONTAINER_ENV=local # Flag for Ansible to know it's local

    # Minimal setup for Ansible connectivity
    command: >
      bash -c "
        # Install only what's needed for Ansible to connect
        apt-get update && 
        apt-get install -y openssh-server systemd systemd-sysv sudo python3 &&
        
        # Configure SSH for key-based auth
        mkdir -p /run/sshd &&
        
        # Create ubuntu user for Ansible
        useradd -m -s /bin/bash ubuntu &&
        usermod -aG sudo ubuntu &&
        echo 'ubuntu ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/ubuntu &&
        
        # Set up SSH key authentication
        mkdir -p /home/ubuntu/.ssh &&
        if [ -f /home/ubuntu/.ssh/authorized_keys ]; then
          cp /home/ubuntu/.ssh/authorized_keys /home/ubuntu/.ssh/authorized_keys.bak || true
        fi &&
        chown -R ubuntu:ubuntu /home/ubuntu/.ssh &&
        chmod 700 /home/ubuntu/.ssh &&
        
        # Start systemd (SSH will auto-start)
        exec /sbin/init
      "

    # Health check
    healthcheck:
      test: ["CMD", "systemctl", "is-active", "ssh"]
      interval: 30s
      timeout: 10s
      retries: 5

    networks:
      - jterrazz-network

# Network for all services
networks:
  jterrazz-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent volumes
volumes:
  server-data:
  k3s-data:
