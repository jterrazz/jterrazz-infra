name: 🚀 Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy
        - plan-only

env:
  TF_VAR_hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
  TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
  TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

jobs:
  deploy:
    name: 🏗️ Infrastructure Deployment
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6.0
        terraform_wrapper: false

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install Ansible
      run: |
        pip install ansible
        ansible-galaxy collection install -r ansible/requirements.yml

    - name: 🔐 Create SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
        chmod 600 ~/.ssh/id_rsa
        chmod 644 ~/.ssh/id_rsa.pub

    - name: ⚙️ Configure Terraform Variables
      run: |
        cd terraform
        cat > terraform.tfvars << EOF
        project_name = "${{ github.repository_owner }}-infra"
        environment = "${{ inputs.environment }}"
        hcloud_token = "${{ secrets.HCLOUD_TOKEN }}"
        ssh_public_key = "${{ secrets.SSH_PUBLIC_KEY }}"
        server_type = "${{ vars.SERVER_TYPE || 'cx21' }}"
        server_location = "${{ vars.SERVER_LOCATION || 'nbg1' }}"
        enable_floating_ip = true
        domain_name = "${{ secrets.DOMAIN_NAME || '' }}"
        subdomain = "${{ vars.SUBDOMAIN || 'manager' }}"
        cloudflare_api_token = "${{ secrets.CLOUDFLARE_API_TOKEN || '' }}"
        cloudflare_zone_id = "${{ secrets.CLOUDFLARE_ZONE_ID || '' }}"
        allowed_ssh_ips = ["${{ vars.ALLOWED_SSH_IPS || '0.0.0.0/0' }}"]
        allowed_k8s_ips = ["${{ vars.ALLOWED_K8S_IPS || '0.0.0.0/0' }}"]
        EOF

    - name: 🏗️ Terraform Init
      run: |
        cd terraform
        terraform init

    - name: 📋 Terraform Plan
      id: plan
      run: |
        cd terraform
        terraform plan -detailed-exitcode -out=tfplan
        echo "exitcode=$?" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: 💬 Comment Terraform Plan
      if: steps.plan.outputs.exitcode == 2
      uses: actions/github-script@v7
      with:
        script: |
          const output = `
          ## 🏗️ Terraform Plan - ${{ inputs.environment }}
          
          **Action**: ${{ inputs.action }}
          **Environment**: ${{ inputs.environment }}
          
          **Status**: ⚡ Changes detected - ready to apply
          
          <details>
          <summary>📋 View Plan Details</summary>
          
          Plan completed successfully with changes.
          Check the Actions log for detailed plan output.
          
          </details>
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue?.number || 1,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: 🛑 Stop if Plan Only
      if: inputs.action == 'plan-only'
      run: |
        echo "✅ Plan completed successfully!"
        echo "Re-run workflow with 'deploy' action to apply changes."
        exit 0

    - name: 💥 Terraform Destroy
      if: inputs.action == 'destroy'
      run: |
        cd terraform
        terraform destroy -auto-approve
        echo "🗑️ Infrastructure destroyed successfully!"

    - name: 🚀 Terraform Apply
      if: inputs.action == 'deploy'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan

    - name: 📤 Get Terraform Outputs
      if: inputs.action == 'deploy'
      id: terraform-outputs
      run: |
        cd terraform
        SERVER_IP=$(terraform output -raw public_ip)
        DOMAIN_FQDN=$(terraform output -raw domain_fqdn || echo "")
        
        echo "server_ip=$SERVER_IP" >> $GITHUB_OUTPUT
        echo "domain_fqdn=$DOMAIN_FQDN" >> $GITHUB_OUTPUT
        
        # Generate Ansible inventory
        terraform output -raw ansible_inventory > ../ansible/inventory.yml

    - name: 🔐 Create Ansible Vault
      if: inputs.action == 'deploy'
      run: |
        cd ansible
        mkdir -p group_vars/all
        cat > group_vars/all/vault.yml << EOF
        vault_k3s_token: "${{ secrets.K3S_TOKEN }}"
        vault_tailscale_auth_key: "${{ secrets.TAILSCALE_AUTH_KEY }}"
        EOF

    - name: ⏳ Wait for Server Ready
      if: inputs.action == 'deploy'
      run: |
        echo "⏳ Waiting for server to be ready..."
        sleep 60
        
        # Test SSH connection
        for i in {1..10}; do
          if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@${{ steps.terraform-outputs.outputs.server_ip }} "echo 'Server ready'"; then
            echo "✅ Server is ready!"
            break
          fi
          echo "⏳ Attempt $i/10: Server not ready, waiting 30s..."
          sleep 30
        done

    - name: ⚙️ Configure Server with Ansible
      if: inputs.action == 'deploy'
      run: |
        cd ansible
        
        # Run Ansible playbook
        ansible-playbook -i inventory.yml site.yml \
          --ssh-common-args='-o StrictHostKeyChecking=no' \
          -v

    - name: 📥 Download Kubeconfig
      if: inputs.action == 'deploy'
      run: |
        scp -o StrictHostKeyChecking=no \
          root@${{ steps.terraform-outputs.outputs.server_ip }}:/etc/rancher/k3s/k3s.yaml \
          ./kubeconfig
        
        # Update server address in kubeconfig
        sed -i "s/127.0.0.1/${{ steps.terraform-outputs.outputs.server_ip }}/g" ./kubeconfig

    - name: 📤 Upload Kubeconfig Artifact
      if: inputs.action == 'deploy'
      uses: actions/upload-artifact@v4
      with:
        name: kubeconfig-${{ inputs.environment }}
        path: kubeconfig
        retention-days: 30

    - name: 🎉 Deployment Summary
      if: inputs.action == 'deploy'
      run: |
        echo "## 🎉 Deployment Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Server IP**: ${{ steps.terraform-outputs.outputs.server_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "**Domain**: ${{ steps.terraform-outputs.outputs.domain_fqdn || 'Not configured' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Access Points:" >> $GITHUB_STEP_SUMMARY
        echo "- **SSH**: \`ssh root@${{ steps.terraform-outputs.outputs.server_ip }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Kubernetes API**: \`https://${{ steps.terraform-outputs.outputs.server_ip }}:6443\`" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ steps.terraform-outputs.outputs.domain_fqdn }}" ]; then
          echo "- **ArgoCD**: https://argocd.${{ steps.terraform-outputs.outputs.domain_fqdn }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Portainer**: https://portainer.${{ steps.terraform-outputs.outputs.domain_fqdn }} (Tailscale only)" >> $GITHUB_STEP_SUMMARY
          echo "- **Homepage**: https://${{ steps.terraform-outputs.outputs.domain_fqdn }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download kubeconfig from Actions artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Test connection: \`kubectl get nodes\`" >> $GITHUB_STEP_SUMMARY
        echo "3. Get ArgoCD password: \`kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎊 **Your infrastructure is ready!**" >> $GITHUB_STEP_SUMMARY

    - name: ❌ Deployment Failed
      if: failure() && inputs.action == 'deploy'
      run: |
        echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Check the logs above for error details." >> $GITHUB_STEP_SUMMARY
        echo "You may need to run 'destroy' action to clean up partial deployment." >> $GITHUB_STEP_SUMMARY
